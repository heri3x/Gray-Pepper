{"version":3,"sources":["../src/upgrader.js"],"names":["require","Spinner","chalk","inquirer","powershell","utils","strings","versions","findNpm","debug","regeneratorRuntime","Upgrader","program","options","prompt","spinner","dnsCheck","checkInternetConnection","isOnline","exit","noInternet","executionPolicyCheck","checkExecutionPolicy","isExecutable","noExecutionPolicy","executionPolicyCheckError","getInstalledNPMVersion","installedVersion","npmVersion","getAvailableNPMVersions","availableVersions","versionList","type","name","message","choices","reverse","then","answer","version","getLatestNPMVersion","npmPath","npmPaths","log","path","startingUpgradeSimple","console","start","runSimpleUpgrade","output","stop","error","startingUpgradeComplex","runUpgrade","stdout","includes","noAdmin","upgradeComplex","wasUpgradeSuccessful","isDone","upgradeFinished","upgradeSimple","logUpgradeFailure","catch","err","quiet","errors","getVersions","debugVersions","info","red","bold","length","process","i","setTimeout","module","exports"],"mappings":"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","file":"upgrader.js","sourcesContent":["const { Spinner } = require('cli-spinner')\r\nconst chalk = require('chalk')\r\nconst inquirer = require('inquirer')\r\n\r\nconst powershell = require('./powershell')\r\nconst utils = require('./utils')\r\nconst strings = require('./strings')\r\nconst versions = require('./versions')\r\nconst findNpm = require('./find-npm')\r\nconst debug = require('./debug')\r\n\r\n// eslint-disable-next-line no-use-before-define\r\nconst regeneratorRuntime = regeneratorRuntime || require('regenerator-runtime-only')\r\n\r\nclass Upgrader {\r\n  constructor (program) {\r\n    this.options = program\r\n\r\n    if (this.options.prompt === false) {\r\n      this.options.spinner = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the upgrader's \"let's check the user's internet\" logic,\r\n   * eventually quietly resolving or quitting the proccess with an\r\n   * error if the connection is not sufficient\r\n   */\r\n  async ensureInternet () {\r\n    if (this.options.dnsCheck !== false) {\r\n      const isOnline = await utils.checkInternetConnection()\r\n\r\n      if (!isOnline) {\r\n        utils.exit(1, strings.noInternet)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the upgrader's \"let's check the user's powershell exeuction\r\n   * policy\" logic, eventually quietly resolving or quitting the proccess\r\n   * with an error if the policy is not sufficient\r\n   */\r\n  async ensureExecutionPolicy () {\r\n    if (this.options.executionPolicyCheck !== false) {\r\n      try {\r\n        const isExecutable = await utils.checkExecutionPolicy()\r\n\r\n        if (!isExecutable) {\r\n          utils.exit(1, strings.noExecutionPolicy)\r\n        }\r\n      } catch (err) {\r\n        utils.exit(1, strings.executionPolicyCheckError, err)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the upgrade was successful\r\n   *\r\n   * @return {boolean} - was the upgrade successful?\r\n   */\r\n  async wasUpgradeSuccessful () {\r\n    this.installedVersion = await versions.getInstalledNPMVersion()\r\n    return (this.installedVersion === this.options.npmVersion)\r\n  }\r\n\r\n  /**\r\n   * Executes the upgrader's \"let's have the user choose a version\" logic\r\n   */\r\n  async chooseVersion () {\r\n    if (!this.options.npmVersion) {\r\n      const availableVersions = await versions.getAvailableNPMVersions()\r\n      const versionList = [{\r\n        type: 'list',\r\n        name: 'version',\r\n        message: 'Which version do you want to install?',\r\n        choices: availableVersions.reverse()\r\n      }]\r\n\r\n      this.options.npmVersion = await inquirer.prompt(versionList)\r\n        .then(answer => answer.version)\r\n    }\r\n\r\n    if (this.options.npmVersion === 'latest') {\r\n      this.options.npmVersion = await versions.getLatestNPMVersion()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the upgrader's \"let's find npm\" logic\r\n   */\r\n  async choosePath () {\r\n    try {\r\n      const npmPaths = await findNpm(this.options.npmPath)\r\n\r\n      this.log(npmPaths.message)\r\n      this.options.npmPath = npmPaths.path\r\n\r\n      debug(`Upgrader: Chosen npm path: ${this.options.npmPath}`)\r\n    } catch (err) {\r\n      utils.exit(1, err)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts a simple upgrade, eventually calling npm install -g npm\r\n   *\r\n   * @param {string} version - Version that should be installed\r\n   * @private\r\n   */\r\n  async upgradeSimple () {\r\n    this.spinner = new Spinner(`${strings.startingUpgradeSimple} %s`)\r\n\r\n    if (this.options.spinner === false) {\r\n      console.log(strings.startingUpgradeSimple)\r\n    } else {\r\n      this.spinner.start()\r\n    }\r\n\r\n    const output = await powershell.runSimpleUpgrade(this.options.npmVersion)\r\n\r\n    this.spinner.stop(false)\r\n    console.log('\\n')\r\n\r\n    if (output.error) {\r\n      throw output.error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upgrades npm in the correct directory, securing and reapplying\r\n   * existing configuration\r\n   *\r\n   * @param  {string} version - Version that should be installed\r\n   * @param  {string} npmPath - Path where npm should be installed\r\n   * @private\r\n   */\r\n  async upgradeComplex () {\r\n    this.spinner = new Spinner(`${strings.startingUpgradeComplex} %s`)\r\n\r\n    if (this.options.spinner === false) {\r\n      console.log(strings.startingUpgradeComplex)\r\n    } else {\r\n      this.spinner.start()\r\n    }\r\n\r\n    const output = await powershell.runUpgrade(this.options.npmVersion, this.options.npmPath)\r\n\r\n    this.spinner.stop(false)\r\n    console.log('\\n')\r\n\r\n    // If we failed to elevate to administrative rights, we have to abort.\r\n    if (output.stdout[0] && output.stdout[0].includes('NOTADMIN')) {\r\n      utils.exit(1, strings.noAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the full upgrade flow\r\n   */\r\n  upgrade () {\r\n    debug('Starting upgrade')\r\n\r\n    return this.upgradeComplex()\r\n      .then(() => this.wasUpgradeSuccessful())\r\n      .then((isDone) => {\r\n        if (isDone) {\r\n          // Awesome, the upgrade worked!\r\n          utils.exit(0, strings.upgradeFinished(this.installedVersion))\r\n        } else {\r\n          return this.upgradeSimple()\r\n        }\r\n      })\r\n      .then(() => this.wasUpgradeSuccessful())\r\n      .then((isDone) => {\r\n        if (isDone) {\r\n          // Awesome, the upgrade worked!\r\n          utils.exit(0, strings.upgradeFinished(this.installedVersion))\r\n        } else {\r\n          this.logUpgradeFailure()\r\n        }\r\n      })\r\n      .catch((err) => console.log(err))\r\n  }\r\n\r\n  /**\r\n   * Logs a message to console, unless the user specified quiet mode\r\n   *\r\n   * @param {string} message - message to log\r\n   * @private\r\n   */\r\n  log (message) {\r\n    if (!this.options.quiet) {\r\n      console.log(message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the whole upgrade failed, we use this method to log a\r\n   * detailed trace with versions - all to make it easier for\r\n   * users to create meaningful issues.\r\n   *\r\n   * @param errors {array} - AS many errors as found\r\n   */\r\n  logUpgradeFailure (...errors) {\r\n    // Uh-oh, something didn't work as it should have.\r\n    versions.getVersions().then((debugVersions) => {\r\n      let info\r\n\r\n      if (this.options.npmVersion && this.installedVersion) {\r\n        info = `You wanted to install npm ${this.options.npmVersion}, but the installed version is ${this.installedVersion}.\\n\\n`\r\n        info += 'A common reason is an attempted \"npm install npm\" or \"npm upgrade npm\". '\r\n        info += 'As of today, the only solution is to completely uninstall and then reinstall Node.js. '\r\n        info += 'For a small tutorial, please see http://aka.ms/fix-npm-upgrade.\\n'\r\n      } else if (this.options.npmVersion) {\r\n        info = `You wanted to install npm ${this.options.npmVersion}, but we could not confirm that the installation succeeded.`\r\n      } else {\r\n        info = 'We encountered an error during installation.\\n'\r\n      }\r\n\r\n      info += '\\nPlease consider reporting your trouble to http://aka.ms/npm-issues.'\r\n\r\n      console.log(chalk.red(info))\r\n      console.log(chalk.bold('\\nDebug Information:\\n'))\r\n      console.log(debugVersions)\r\n\r\n      if (errors && errors.length && errors.length > 0) console.log('Here is the error:')\r\n\r\n      // If we just got an error string (we shouldn't handle that)\r\n      if (typeof errors !== 'string') {\r\n        console.log('\\n' + errors + '\\n')\r\n        return process.exit(1)\r\n      }\r\n\r\n      for (let i = 0; i < errors.length; i++) {\r\n        console.log('\\n' + errors[i] + '\\n')\r\n      }\r\n\r\n      setTimeout(() => {\r\n        process.exit(1)\r\n      }, 1000)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Upgrader\r\n"]}