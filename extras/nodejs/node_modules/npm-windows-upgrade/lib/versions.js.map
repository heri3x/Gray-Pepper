{"version":3,"sources":["../src/versions.js"],"names":["exec","require","nwuVersion","version","getInstalledNPMVersion","Promise","resolve","reject","nodeVersion","err","stdout","Error","replace","getAvailableNPMVersions","error","JSON","parse","getLatestNPMVersion","latest","trim","_getWindowsVersion","command","getVersions","versions","process","prettyVersions","os","platform","arch","variable","hasOwnProperty","push","then","windowsVersion","join","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,eAAR,EAAyBD,IAAtC;AACA,IAAME,aAAaD,QAAQ,iBAAR,EAA2BE,OAA9C;;AAEA;;;;AAIA,SAASC,sBAAT,GAAmC;AACjC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,oBAAJ;;AAEAR,SAAK,QAAL,EAAe,UAACS,GAAD,EAAMC,MAAN,EAAiB;AAC9B,UAAID,GAAJ,EAAS;AACPF,eAAO,IAAII,KAAJ,CAAU,kCAAV,CAAP;AACD,OAFD,MAEO;AACLH,sBAAcE,OAAOE,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAd;AACAN,gBAAQE,WAAR;AACD;AACF,KAPD;AAQD,GAXM,CAAP;AAYD;;AAED;;;;AAIA,SAASK,uBAAT,GAAoC;AAClC,SAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,SAAK,8BAAL,EAAqC,UAACS,GAAD,EAAMC,MAAN,EAAiB;AACpD,UAAID,GAAJ,EAAS;AACP,YAAIK,QAAQ,6EAAZ;AACAA,iBAAS,gFAAT;AACA,eAAOP,OAAOO,KAAP,CAAP;AACD;;AAEDR,cAAQS,KAAKC,KAAL,CAAWN,MAAX,CAAR;AACD,KARD;AASD,GAVM,CAAP;AAWD;;AAED;;;;AAIA,SAASO,mBAAT,GAAgC;AAC9B,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,SAAK,sBAAL,EAA6B,UAACS,GAAD,EAAMC,MAAN,EAAiB;AAC5C,UAAID,GAAJ,EAAS;AACP,YAAIK,QAAQ,6EAAZ;AACAA,iBAAS,gFAAT;AACA,eAAOP,OAAOO,KAAP,CAAP;AACD;;AAED,UAAII,SAASR,OAAOE,OAAP,CAAe,gBAAf,EAAiC,EAAjC,CAAb;;AAEAN,cAAQY,OAAOC,IAAP,EAAR;AACD,KAVD;AAWD,GAZM,CAAP;AAaD;;AAED;;;AAGA,SAASC,kBAAT,GAA+B;AAC7B,SAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMc,UAAU,sDAAhB;AACArB,SAAKqB,OAAL,EAAc,UAACP,KAAD,EAAQJ,MAAR,EAAmB;AAC/B,UAAII,KAAJ,EAAW;AACTP,eAAOO,KAAP;AACD,OAFD,MAEO;AACLR,gBAAQI,MAAR;AACD;AACF,KAND;AAOD,GATM,CAAP;AAUD;;AAED;;;AAGA,SAASY,WAAT,GAAwB;AACtB,SAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,QAAIiB,WAAWC,QAAQD,QAAvB;AACA,QAAIE,iBAAiB,EAArB;AACAF,aAASG,EAAT,GAAcF,QAAQG,QAAR,GAAmB,GAAnB,GAAyBH,QAAQI,IAA/C;;AAEA,SAAK,IAAIC,QAAT,IAAqBN,QAArB,EAA+B;AAC7B,UAAIA,SAASO,cAAT,CAAwBD,QAAxB,CAAJ,EAAuC;AACrCJ,uBAAeM,IAAf,CAAuBF,QAAvB,UAAoCN,SAASM,QAAT,CAApC;AACD;AACF;;AAEDT,yBACGY,IADH,CACQ,UAACC,cAAD,EAAoB;AACxBR,qBAAeM,IAAf,CAAoBE,eAAerB,OAAf,CAAuB,MAAvB,EAA+B,GAA/B,CAApB,EADwB,CACiC;AACzDN,cAAQmB,eAAeS,IAAf,CAAoB,KAApB,CAAR;AACD,KAJH;AAKD,GAhBM,CAAP;AAiBD;;AAEDC,OAAOC,OAAP,GAAiB;AACflC,wBADe;AAEfE,gDAFe;AAGfa,0CAHe;AAIfJ,kDAJe;AAKfS;AALe,CAAjB","file":"versions.js","sourcesContent":["const exec = require('child_process').exec\r\nconst nwuVersion = require('../package.json').version\r\n\r\n/**\r\n * Gets the currently installed version of npm (npm -v)\r\n * @return {Promise.<string>} - Installed version of npm\r\n */\r\nfunction getInstalledNPMVersion () {\r\n  return new Promise((resolve, reject) => {\r\n    let nodeVersion\r\n\r\n    exec('npm -v', (err, stdout) => {\r\n      if (err) {\r\n        reject(new Error('Could not determine npm version.'))\r\n      } else {\r\n        nodeVersion = stdout.replace(/\\n/, '')\r\n        resolve(nodeVersion)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Fetches the published versions of npm from the npm registry\r\n * @return {Promise.<versions[]>} - Array of the available versions\r\n */\r\nfunction getAvailableNPMVersions () {\r\n  return new Promise((resolve, reject) => {\r\n    exec('npm view npm versions --json', (err, stdout) => {\r\n      if (err) {\r\n        let error = 'We could not show latest available versions. Try running this script again '\r\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)'\r\n        return reject(error)\r\n      }\r\n\r\n      resolve(JSON.parse(stdout))\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Fetches the published versions of npm from the npm registry\r\n * @return {Promise.<version>} - Array of the available versions\r\n */\r\nfunction getLatestNPMVersion () {\r\n  return new Promise((resolve, reject) => {\r\n    exec('npm show npm version', (err, stdout) => {\r\n      if (err) {\r\n        let error = 'We could not show latest available versions. Try running this script again '\r\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)'\r\n        return reject(error)\r\n      }\r\n\r\n      let latest = stdout.replace(/(\\r\\n|\\n|\\r)/gm, '')\r\n\r\n      resolve(latest.trim())\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Get the current name and version of Windows\r\n */\r\nfunction _getWindowsVersion () {\r\n  return new Promise((resolve, reject) => {\r\n    const command = 'systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"'\r\n    exec(command, (error, stdout) => {\r\n      if (error) {\r\n        reject(error)\r\n      } else {\r\n        resolve(stdout)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Get installed versions of virtually everything important\r\n */\r\nfunction getVersions () {\r\n  return new Promise((resolve) => {\r\n    let versions = process.versions\r\n    let prettyVersions = []\r\n    versions.os = process.platform + ' ' + process.arch\r\n\r\n    for (let variable in versions) {\r\n      if (versions.hasOwnProperty(variable)) {\r\n        prettyVersions.push(`${variable}: ${versions[variable]}`)\r\n      }\r\n    }\r\n\r\n    _getWindowsVersion()\r\n      .then((windowsVersion) => {\r\n        prettyVersions.push(windowsVersion.replace(/  +/g, ' ')) // eslint-disable-line no-regex-spaces\r\n        resolve(prettyVersions.join(' | '))\r\n      })\r\n  })\r\n}\r\n\r\nmodule.exports = {\r\n  nwuVersion,\r\n  getInstalledNPMVersion,\r\n  getLatestNPMVersion,\r\n  getAvailableNPMVersions,\r\n  getVersions\r\n}\r\n"]}