{"version":3,"sources":["../src/utils.js"],"names":["fs","require","spawn","debug","exit","status","messages","forEach","console","log","message","process","checkInternetConnection","Promise","resolve","lookup","err","code","checkExecutionPolicy","reject","output","child","error","stdout","on","data","toString","push","stderr","linesHit","filter","line","includes","unrestricted","length","stdin","end","isPathAccessible","filePath","accessSync","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;eACkBA,QAAQ,eAAR,C;IAAVC,K,YAAAA,K;;AAER;;;AACA,IAAMC,QAAQF,QAAQ,SAAR,CAAd;;AAEA;;;;;;;AAOA,SAASG,IAAT,CAAeC,MAAf,EAAoC;AAAA,oCAAVC,QAAU;AAAVA,YAAU;AAAA;;AAClC,MAAIA,QAAJ,EAAc;AACZA,aAASC,OAAT,CAAiB;AAAA,aAAWC,QAAQC,GAAR,CAAYC,OAAZ,CAAX;AAAA,KAAjB;AACD;;AAEDC,UAAQP,IAAR,CAAaC,MAAb;AACD;;AAED;;;;;AAKA,SAASO,uBAAT,GAAoC;AAClC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9Bb,YAAQ,KAAR,EAAec,MAAf,CAAsB,eAAtB,EAAuC,UAACC,GAAD,EAAS;AAC9C,UAAIA,OAAOA,IAAIC,IAAJ,KAAa,WAAxB,EAAqC;AACnCH,gBAAQ,KAAR;AACD,OAFD,MAEO;AACLA,gBAAQ,IAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED;;;;;AAKA,SAASI,oBAAT,GAAiC;AAC/B,SAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUK,MAAV,EAAqB;AACtC,QAAIC,SAAS,EAAb;AACA,QAAIC,cAAJ;;AAEA,QAAI;AACFlB,YAAM,kDAAN;AACAkB,cAAQnB,MAAM,gBAAN,EAAwB,CAAC,YAAD,EAAe,SAAf,EAA0B,qBAA1B,CAAxB,CAAR;AACD,KAHD,CAGE,OAAOoB,KAAP,EAAc;AACdnB,YAAM,8CAAN;AACAgB,aAAOG,KAAP;AACD;;AAEDD,UAAME,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCtB,YAAM,kCAAkCsB,KAAKC,QAAL,EAAxC;AACAN,aAAOO,IAAP,CAAYF,KAAKC,QAAL,EAAZ;AACD,KAHD;;AAKAL,UAAMO,MAAN,CAAaJ,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCtB,YAAM,kCAAkCsB,KAAKC,QAAL,EAAxC;AACAN,aAAOO,IAAP,CAAYF,KAAKC,QAAL,EAAZ;AACD,KAHD;;AAKAL,UAAMG,EAAN,CAAS,MAAT,EAAiB,YAAM;AACrB,UAAMK,WAAWT,OAAOU,MAAP,CAAc,UAACC,IAAD;AAAA,eAAUA,KAAKC,QAAL,CAAc,cAAd,KAAiCD,KAAKC,QAAL,CAAc,cAAd,CAAjC,IAAkED,KAAKC,QAAL,CAAc,QAAd,CAA5E;AAAA,OAAd,CAAjB;AACA,UAAMC,eAAgBJ,SAASK,MAAT,GAAkB,CAAxC;;AAEA,UAAI,CAACD,YAAL,EAAmB;AACjB9B,cAAM,0CAAN;AACAW,gBAAQ,KAAR;AACD,OAHD,MAGO;AACLX,cAAM,2CAAN;AACAW,gBAAQ,IAAR;AACD;AACF,KAXD;;AAaAO,UAAMc,KAAN,CAAYC,GAAZ;AACD,GApCM,CAAP;AAqCD;;AAED;;;;;;AAMA,SAASC,gBAAT,CAA2BC,QAA3B,EAAqC;AACnC,MAAI;AACFtC,OAAGuC,UAAH,CAAcD,QAAd;AACAnC,0CAAoCmC,QAApC;AACA,WAAO,IAAP;AACD,GAJD,CAIE,OAAOtB,GAAP,EAAY;AACZb,0CAAoCmC,QAApC;AACA,WAAO,KAAP;AACD;AACF;;AAEDE,OAAOC,OAAP,GAAiB;AACf7B,kDADe;AAEfM,4CAFe;AAGfd,YAHe;AAIfiC;AAJe,CAAjB","file":"utils.js","sourcesContent":["const fs = require('fs')\r\nconst { spawn } = require('child_process')\r\n\r\n// Internal Modules\r\nconst debug = require('./debug')\r\n\r\n/**\r\n * Exits the process with a given status,\r\n * logging a given message before exiting.\r\n *\r\n * @param {number} status - exit status\r\n * @param {string} messages - message to log\r\n */\r\nfunction exit (status, ...messages) {\r\n  if (messages) {\r\n    messages.forEach(message => console.log(message))\r\n  }\r\n\r\n  process.exit(status)\r\n}\r\n\r\n/**\r\n * Checks for an active Internet connection by doing a DNS lookup of Microsoft.com.\r\n *\r\n * @return {Promise.<boolean>} - True if lookup succeeded (or if we skip the test)\r\n */\r\nfunction checkInternetConnection () {\r\n  return new Promise((resolve) => {\r\n    require('dns').lookup('microsoft.com', (err) => {\r\n      if (err && err.code === 'ENOTFOUND') {\r\n        resolve(false)\r\n      } else {\r\n        resolve(true)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Checks the current Windows PS1 execution policy. The upgrader requires an unrestricted policy.\r\n *\r\n * @return {Promise.<boolean>} - True if unrestricted, false if it isn't\r\n */\r\nfunction checkExecutionPolicy () {\r\n  return new Promise((resolve, reject) => {\r\n    let output = []\r\n    let child\r\n\r\n    try {\r\n      debug('Powershell: Attempting to spawn PowerShell child')\r\n      child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy'])\r\n    } catch (error) {\r\n      debug('Powershell: Could not spawn PowerShell child')\r\n      reject(error)\r\n    }\r\n\r\n    child.stdout.on('data', (data) => {\r\n      debug('PowerShell: Stdout received: ' + data.toString())\r\n      output.push(data.toString())\r\n    })\r\n\r\n    child.stderr.on('data', (data) => {\r\n      debug('PowerShell: Stderr received: ' + data.toString())\r\n      output.push(data.toString())\r\n    })\r\n\r\n    child.on('exit', () => {\r\n      const linesHit = output.filter((line) => line.includes('Unrestricted') || line.includes('RemoteSigned') || line.includes('Bypass'))\r\n      const unrestricted = (linesHit.length > 0)\r\n\r\n      if (!unrestricted) {\r\n        debug('PowerShell: Resolving restricted (false)')\r\n        resolve(false)\r\n      } else {\r\n        debug('PowerShell: Resolving unrestricted (true)')\r\n        resolve(true)\r\n      }\r\n    })\r\n\r\n    child.stdin.end()\r\n  })\r\n}\r\n\r\n/**\r\n * Checks if a path exists\r\n *\r\n * @param filePath - file path to check\r\n * @returns {boolean} - does the file path exist?\r\n */\r\nfunction isPathAccessible (filePath) {\r\n  try {\r\n    fs.accessSync(filePath)\r\n    debug(`Utils: isPathAccessible(): ${filePath} exists`)\r\n    return true\r\n  } catch (err) {\r\n    debug(`Utils: isPathAccessible(): ${filePath} does not exist`)\r\n    return false\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  checkInternetConnection,\r\n  checkExecutionPolicy,\r\n  exit,\r\n  isPathAccessible\r\n}\r\n"]}